import java.util.*;

public class LeakyBucket {
    int burst;
    int bucketSize;
    int outgoingRate;
    int duration;

    Random rand = new Random();

    LeakyBucket() {
        pending = 0;
        incoming = 0;
        outgoing = 0;
        overflow = 0;
    }

    void leakyBucket() {
        System.out.println("Time Incoming Pending Overflow Outgoing");
        int time = 0;
        while (time < duration) {
            incoming = rand.nextInt(burst);
            if ((pending + incoming) > bucketSize) {
                overflow = (pending + incoming) - bucketSize;
                pending = bucketSize;
            } else {
                pending += incoming;
            }
            // interval = rand()%10;
            int interval = 1;
            for (int clk = 0; clk < interval; ++clk) {
                output(time, incoming, pending, overflow, outgoing);
                // sleep(1);
                outgoing = Math.min(outgoingRate, pending);
                pending -= outgoing;
                incoming = 0;
                ++time;
            }
        }
    }

    void input() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter Burst Size: ");
        burst = scanner.nextInt();
        System.out.println("Enter bucket size: ");
        bucketSize = scanner.nextInt();
        System.out.println("Enter outgoing rate: ");
        outgoingRate = scanner.nextInt();
        System.out.println("Enter duration: ");
        duration = scanner.nextInt();
        scanner.close();
    }

    void output(int time, int incoming, int pending, int overflow, int outgoing) {
        System.out.printf("%d\t%d\t%d\t%d\t%d\n", time, incoming, pending, overflow, outgoing);
    }

    public static void main(String[] args) {
        LeakyBucket lb = new LeakyBucket();
        lb.input();
        lb.leakyBucket();
    }
}
